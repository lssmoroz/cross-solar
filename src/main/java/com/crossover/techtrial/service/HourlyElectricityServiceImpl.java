package com.crossover.techtrial.service;

import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.repository.HourlyElectricityRepository;

import com.crossover.techtrial.repository.PanelRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
 *
 * @author Crossover
 *
 */

@Service
public class HourlyElectricityServiceImpl implements HourlyElectricityService {
    private static final Logger LOG = LoggerFactory.getLogger(HourlyElectricityServiceImpl.class);

    @Autowired
    HourlyElectricityRepository hourlyElectricityRepository;

    @Autowired
    PanelRepository panelRepository;

    final static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("mm:ss.SSS");

    public HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial) {
        //If we get wrong (not hour) time - reject it before analyst approving another behavior
        if (null == hourlyElectricity.getReadingAt() || !hourlyElectricity.getReadingAt().format(formatter).equals("00:00.000")) {
            LOG.error("Error date format (mm:ss.SSS): {}", hourlyElectricity.getReadingAt().format(formatter));
            throw new RuntimeException("Wrong date format!");
        }

        if (null == hourlyElectricity.getPanel()) {
            Panel panel = panelRepository.findBySerial(panelSerial);
            if (null == panel) {
                LOG.error("Wrong serial number of panel: {}", panelSerial);
                throw new RuntimeException("Wrong serial number of panel!");
            }
            hourlyElectricity.setPanel(panel);
        }

        //If we have the same time for panel in DB already - reject it before analyst approving another behavior
        if (null != hourlyElectricityRepository.findFirstByPanelIdAndReadingAt(hourlyElectricity.getPanel().getId(), hourlyElectricity.getReadingAt())) {
            LOG.error("Already have time {} for panel {}", hourlyElectricity.getReadingAt(),  panelSerial);
            throw new RuntimeException("Already have time for panel!");
        }

        return hourlyElectricityRepository.save(hourlyElectricity);
    }

    public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
        return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
    }

}